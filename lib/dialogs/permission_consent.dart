import 'package:document_manager/comms/extensions.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:url_launcher/url_launcher.dart';

import '../comms/user_pref.dart';
import '../theme/theme.dart';



class PermissionConsent {

  static const MIC_PERMISSION = "MIC_PERMISSION";
  static const LOCATION_PERMISSION = "LOCATION_PERMISSION";
  static const SPEECH_PERMISSION = "SPEECH_PERMISSION";
  static const PHOTOS_PERMISSION = "PHOTOS_PERMISSION";
  static const PUSH_NOTIFICATION = "PUSH_NOTIFICATION";

  BuildContext context;
  Function() onGranted;
  Function()? denied;
  PermissionConsent(this.context, this.onGranted, {this.denied});

  void askPermissionConsent(String permission){

    if(permission==MIC_PERMISSION) {

      UserPrefs.read(MIC_PERMISSION).then((value) {
        if(value!=null) {
          onGranted();
        } else {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return CustomAlertDialog(
                "Microphone Access","You can simply speak to search for businesses instead of typing we'll match the result based on your speech",
                "images/png/mic.svg",
                    () {
                  UserPrefs.write(MIC_PERMISSION,MIC_PERMISSION).then((value){
                    onGranted();
                  });
                },() {
                if(denied!=null){
                  denied!();
                }
              },
              );
            },
          );
        }
      });

    } else if(permission==LOCATION_PERMISSION) {

      UserPrefs.read(LOCATION_PERMISSION).then((value) {
        if(value!=null) {
          onGranted();
        } else {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return CustomAlertDialog(
                " Location Access",
                "Our app can automatically detect your current location and suggest the address when adding a new business",
                "images/png/location.svg",
                    () {
                  UserPrefs.write(LOCATION_PERMISSION,LOCATION_PERMISSION).then((value){
                    onGranted();
                  });
                },() {
                if(denied!=null){
                  denied!();
                }
              },
              );
            },
          );
        }
      });
    } else if(permission == SPEECH_PERMISSION) {
      UserPrefs.read(SPEECH_PERMISSION).then((value) {
        if(value!=null) {
          onGranted();
        } else {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return CustomAlertDialog(
                "Speech Recognition",
                "You can simply speak to search for businesses instead of typing we'll match the result based on your speech",
                "images/png/speech.svg",
                    () {
                  UserPrefs.write(SPEECH_PERMISSION,SPEECH_PERMISSION).then((value){
                    onGranted();
                  });
                },() {
                if(denied!=null){
                  denied!();
                }
              },
              );
            },
          );
        }
      });
    }
    else if(permission == PHOTOS_PERMISSION) {
      UserPrefs.read(PHOTOS_PERMISSION).then((value) {
        if(value!=null) {
          onGranted();
        } else {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return CustomAlertDialog(
                "Photo Gallery",
                "Add photos related to the business while you registering new business or editing existing businesses",
                "images/png/photo.svg",
                    () {
                  UserPrefs.write(PHOTOS_PERMISSION,PHOTOS_PERMISSION).then((value){
                    onGranted();
                  });
                },() {
                if(denied!=null){
                  denied!();
                }
              },
              );
            },
          );
        }
      });
    }
    else if(permission == PUSH_NOTIFICATION) {
      UserPrefs.read(PUSH_NOTIFICATION).then((value) {
        if(value!=null) {
          onGranted();
        } else {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return CustomAlertDialog(
                "Get Notified",
                "Receive important update regarding your profile activity and inquiry generated by other users for your business profiles stay informed and engaged with our latest announcement and activities",
                "images/png/notification.svg", () {
                UserPrefs.write(PUSH_NOTIFICATION,PUSH_NOTIFICATION).then((value){
                  onGranted();
                });
              },() {
                if(denied!=null){
                  denied!();
                }
              },
              );
            },
          );
        }
      });
    }
  }
}

class CustomAlertDialog extends StatelessWidget {

  String title,message,iconPath;
  Function() onGranted;
  Function() onDenied;
  CustomAlertDialog(this.title, this.message, this.iconPath, this.onGranted,this.onDenied, {super.key});

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(15.0),
      ),
      content: SingleChildScrollView(
        child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [

              SvgPicture.asset(iconPath, semanticsLabel: 'Label',width: 50,height: 50, color: Themer.gradient1,),
              const SizedBox(height: 20.0),
              Text(
                title,
                textAlign: TextAlign.center,
                style: const TextStyle(
                  fontSize: 20.0,
                  color: Colors.black,
                  fontWeight: FontWeight.w800,
                ),
              ),
              const SizedBox(height: 20.0),
              Text(
                message,
                textAlign: TextAlign.center,
                style: const TextStyle(),
              ),
              const SizedBox(height: 30.0),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [

                  Expanded(child: Container(
                    height: 50,
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [Themer.white, Themer.white],
                      ),
                      borderRadius: BorderRadius.all(Radius.circular(15)),
                    ),
                    child: const Center(
                      child: Text("Not Now",style: TextStyle(
                          color: Themer.gradient1,
                          fontWeight: FontWeight.bold,
                          fontSize: 15
                      ),),
                    ),
                  ).clickAnim((){
                    Navigator.of(context).pop();
                    onDenied();
                  }),),

                  const SizedBox(width: 20,),
                  Expanded(child: Container(
                    height: 50,
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [Themer.gradient1, Themer.gradient1],
                      ),
                      borderRadius: BorderRadius.all(Radius.circular(15)),
                    ),
                    child: const Center(
                      child: Text("Continue",style: TextStyle(
                          color: Themer.white,
                          fontWeight: FontWeight.bold,
                          fontSize: 15
                      ),),
                    ),
                  ).clickAnim((){
                    Navigator.of(context).pop();
                    onGranted();
                  }),),

                ],
              ),
              const SizedBox(height: 20.0),
              Container(
                color: Themer.gradient1,
                alignment: Alignment.center,
                padding: const EdgeInsets.all(10),
                child: Center(
                    child: Text.rich(
                        TextSpan(
                            text: "By continuing you agree to Document's ", style: const TextStyle(
                            fontSize: 13,
                            color: Colors.black
                        ),
                            children: <TextSpan>[
                              TextSpan(
                                  text: 'Privacy Policy', style: const TextStyle(
                                fontSize: 13,
                                color: Themer.textColor,
                                decoration: TextDecoration.underline,
                              ),
                                  recognizer: TapGestureRecognizer()
                                    ..onTap = () async{
                                      final  uri = Uri.parse('');
                                      if (await canLaunchUrl(uri)){
                                        await launchUrl(uri);
                                      } else {
                                        throw Exception('Could not launch $uri');
                                      }
                                    }
                              ),
                              const TextSpan(
                                text: ' we have described how your data is handled ', style: TextStyle(
                                  fontSize: 13, color: Colors.black
                              ),
                              )
                            ]
                        )
                    )
                ),
              )
            ]
        ),
      ),
    );
  }
}